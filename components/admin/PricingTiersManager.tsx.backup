'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Label } from '@/components/ui/label'
import { Textarea } from '@/components/ui/textarea'
import { Badge } from '@/components/ui/badge'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog'
import { Alert, AlertDescription } from '@/components/ui/alert'
import { Switch } from '@/components/ui/switch'
import { Separator } from '@/components/ui/separator'
import { useToast } from '@/hooks/use-toast'
import { 
  Calendar, 
  Clock, 
  DollarSign, 
  Edit, 
  Plus, 
  Save, 
  Trash2, 
  AlertCircle, 
  CheckCircle,
  Settings,
  Users,
  Tag,
  TrendingUp,
  CalendarDays
} from 'lucide-react'

interface PricingCategory {
  amount: number
  currency: string
  label: string
}

interface PricingTier {
  id: string
  name: string
  description: string
  startDate: string
  endDate: string
  isActive: boolean
  categories: {
    [key: string]: PricingCategory
  }
}

interface SpecialOffer extends PricingTier {
  // Special offers have the same structure as tiers
}

interface PricingTiersData {
  specialOffers: SpecialOffer[]
  earlyBird: PricingTier
  regular: PricingTier
  onsite: PricingTier
}

const categoryKeys = ['ntsi-member', 'non-member', 'pg-student', 'accompanying']
const categoryLabels = {
  'ntsi-member': 'NTSI Member',
  'non-member': 'Non Member', 
  'pg-student': 'PG Student',
  'accompanying': 'Accompanying Person'
}

export function PricingTiersManager() {
  const { toast } = useToast()
  const [pricingData, setPricingData] = useState<PricingTiersData | null>(null)
  const [currentTier, setCurrentTier] = useState<any>(null)
  const [nextTier, setNextTier] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const [editingTier, setEditingTier] = useState<string | null>(null)
  const [newSpecialOffer, setNewSpecialOffer] = useState<SpecialOffer | null>(null)
  const [showNewOfferDialog, setShowNewOfferDialog] = useState(false)

  // Load pricing data
  useEffect(() => {
    loadPricingData()
  }, [])

  const loadPricingData = async () => {
    try {
      setLoading(true)
      
      // Load pricing tiers configuration
      const tiersResponse = await fetch('/api/admin/config/pricing-tiers')
      if (tiersResponse.ok) {
        const tiersResult = await tiersResponse.json()
        if (tiersResult.success) {
          setPricingData(tiersResult.data)
        }
      }

      // Load current/next tier info
      const pricingResponse = await fetch('/api/payment/pricing')
      if (pricingResponse.ok) {
        const pricingResult = await pricingResponse.json()
        if (pricingResult.success) {
          setCurrentTier(pricingResult.data.currentTier)
          setNextTier(pricingResult.data.nextTier)
        }
      }
    } catch (error) {
      console.error('Error loading pricing data:', error)
      toast({
        title: "Error",
        description: "Failed to load pricing data",
        variant: "destructive"
      })
    } finally {
      setLoading(false)
    }
  }

  const savePricingTiers = async (updatedData: PricingTiersData) => {
    try {
      setSaving(true)
      const response = await fetch('/api/admin/config/pricing-tiers', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedData)
      })

      const result = await response.json()
      if (result.success) {
        setPricingData(updatedData)
        setEditingTier(null)
        toast({
          title: "Success",
          description: "Pricing tiers updated successfully"
        })
        // Reload to get updated current/next tier info
        loadPricingData()
      } else {
        throw new Error(result.message)
      }
    } catch (error) {
      console.error('Error saving pricing tiers:', error)
      toast({
        title: "Error",
        description: "Failed to save pricing tiers",
        variant: "destructive"
      })
    } finally {
      setSaving(false)
    }
  }

  const updateTierCategories = (tierType: string, categories: { [key: string]: PricingCategory }) => {
    if (!pricingData) return

    const updatedData = { ...pricingData }
    if (tierType === 'earlyBird' || tierType === 'regular' || tierType === 'onsite') {
      updatedData[tierType as keyof PricingTiersData] = {
        ...(updatedData[tierType as keyof PricingTiersData] as PricingTier),
        categories
      }
    }
    
    savePricingTiers(updatedData)
  }

  const updateTierInfo = (tierType: string, updates: Partial<PricingTier>) => {
    if (!pricingData) return

    const updatedData = { ...pricingData }
    if (tierType === 'earlyBird' || tierType === 'regular' || tierType === 'onsite') {
      updatedData[tierType as keyof PricingTiersData] = {
        ...(updatedData[tierType as keyof PricingTiersData] as PricingTier),
        ...updates
      }
    }
    
    savePricingTiers(updatedData)
  }

  const addSpecialOffer = (offer: SpecialOffer) => {
    if (!pricingData) return

    const updatedData = {
      ...pricingData,
      specialOffers: [...pricingData.specialOffers, offer]
    }
    
    savePricingTiers(updatedData)
    setShowNewOfferDialog(false)
    setNewSpecialOffer(null)
  }

  const updateSpecialOffer = (offerId: string, updates: Partial<SpecialOffer>) => {
    if (!pricingData) return

    const updatedData = {
      ...pricingData,
      specialOffers: pricingData.specialOffers.map(offer => 
        offer.id === offerId ? { ...offer, ...updates } : offer
      )
    }
    
    savePricingTiers(updatedData)
  }

  const startEditingSpecialOffer = (offer: SpecialOffer) => {
    setEditingSpecialOffer(offer)
    setShowEditOfferDialog(true)
  }

  const deleteSpecialOffer = (offerId: string) => {
    if (!pricingData) return
    
    if (confirm('Are you sure you want to delete this special offer? This action cannot be undone.')) {
      const updatedData = {
        ...pricingData,
        specialOffers: pricingData.specialOffers.filter(offer => offer.id !== offerId)
      }
      
      savePricingTiers(updatedData)
      toast({
        title: "Special Offer Deleted",
        description: "The special offer has been removed successfully."
      })
    }
  }

  // Add missing state variables
  const [editingSpecialOffer, setEditingSpecialOffer] = useState<SpecialOffer | null>(null)
  const [showEditOfferDialog, setShowEditOfferDialog] = useState(false)

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    })
  }

  const formatCurrency = (amount: number, currency: string) => {
    if (currency === 'USD') {
      return `$${amount.toLocaleString()}`
    }
    return `â‚¹${amount.toLocaleString()}`
  }

  const renderCategoryEditor = (categories: { [key: string]: PricingCategory }, onUpdate: (categories: { [key: string]: PricingCategory }) => void) => {
    return (
      <div className="space-y-4">
        {categoryKeys.map(key => (
          <div key={key} className="grid grid-cols-1 md:grid-cols-3 gap-3 p-4 border rounded-lg">
            <div className="md:col-span-1">
              <Label className="text-sm font-medium">{categoryLabels[key as keyof typeof categoryLabels]}</Label>
            </div>
            <div>
              <Label className="text-xs text-muted-foreground">Amount</Label>
              <Input
                type="number"
                value={categories[key]?.amount || 0}
                onChange={(e) => onUpdate({
                  ...categories,
                  [key]: {
                    ...categories[key],
                    amount: parseInt(e.target.value) || 0
                  }
                })}
                className="text-sm"
              />
            </div>
            <div>
              <Label className="text-xs text-muted-foreground">Currency</Label>
              <select
                value={categories[key]?.currency || 'INR'}
                onChange={(e) => onUpdate({
                  ...categories,
                  [key]: {
                    ...categories[key],
                    currency: e.target.value
                  }
                })}
                className="w-full px-3 py-2 text-sm border border-input bg-background rounded-md"
              >
                <option value="INR">INR</option>
                <option value="USD">USD</option>
              </select>
            </div>
          </div>
        ))}
      </div>
    )
  }

  // Create separate state for each tier editing
  const [earlyBirdEditData, setEarlyBirdEditData] = useState<PricingTier | null>(null)
  const [regularEditData, setRegularEditData] = useState<PricingTier | null>(null)
  const [onsiteEditData, setOnsiteEditData] = useState<PricingTier | null>(null)

  useEffect(() => {
    if (pricingData) {
      setEarlyBirdEditData(pricingData.earlyBird)
      setRegularEditData(pricingData.regular)
      setOnsiteEditData(pricingData.onsite)
    }
  }, [pricingData])

  const getEditData = (tierType: string) => {
    switch (tierType) {
      case 'earlyBird': return earlyBirdEditData
      case 'regular': return regularEditData  
      case 'onsite': return onsiteEditData
      default: return null
    }
  }

  const setEditData = (tierType: string, data: PricingTier) => {
    switch (tierType) {
      case 'earlyBird': setEarlyBirdEditData(data); break
      case 'regular': setRegularEditData(data); break
      case 'onsite': setOnsiteEditData(data); break
    }
  }

  const renderTierCard = (tier: PricingTier, tierType: string, isCurrentTier: boolean = false) => {
    const isEditing = editingTier === tierType
    const editData = getEditData(tierType)

    if (!editData) return null

    return (
      <Card className={`${isCurrentTier ? 'ring-2 ring-green-500' : ''}`}>
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle className="flex items-center space-x-2">
                <span>{tier.name}</span>
                {isCurrentTier && <Badge variant="secondary" className="bg-green-100 text-green-800">Active Now</Badge>}
              </CardTitle>
              <CardDescription>{tier.description}</CardDescription>
            </div>
            <div className="flex items-center space-x-2">
              <Switch
                checked={tier.isActive}
                onCheckedChange={(checked) => updateTierInfo(tierType, { isActive: checked })}
              />
              <Button
                variant="outline"
                size="sm"
                onClick={() => setEditingTier(isEditing ? null : tierType)}
              >
                <Edit className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardHeader>
        <CardContent className="space-y-4">
          {!isEditing ? (
            <>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <Label className="text-xs text-muted-foreground">Start Date</Label>
                  <p className="font-medium">{formatDate(tier.startDate)}</p>
                </div>
                <div>
                  <Label className="text-xs text-muted-foreground">End Date</Label>
                  <p className="font-medium">{formatDate(tier.endDate)}</p>
                </div>
              </div>
              
              <Separator />
              
              <div className="space-y-3">
                <Label className="text-sm font-medium">Category Pricing</Label>
                {categoryKeys.map(key => (
                  <div key={key} className="flex justify-between items-center">
                    <span className="text-sm">{categoryLabels[key as keyof typeof categoryLabels]}</span>
                    <span className="font-medium">
                      {formatCurrency(tier.categories[key]?.amount || 0, tier.categories[key]?.currency || 'INR')}
                    </span>
                  </div>
                ))}
              </div>
            </>
          ) : (
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label>Tier Name</Label>
                  <Input
                    value={editData.name}
                    onChange={(e) => setEditData(tierType, { ...editData!, name: e.target.value })}
                  />
                </div>
                <div>
                  <Label>Description</Label>
                  <Input
                    value={editData.description}
                    onChange={(e) => setEditData(tierType, { ...editData!, description: e.target.value })}
                  />
                </div>
                <div>
                  <Label>Start Date</Label>
                  <Input
                    type="date"
                    value={editData.startDate}
                    onChange={(e) => setEditData(tierType, { ...editData!, startDate: e.target.value })}
                  />
                </div>
                <div>
                  <Label>End Date</Label>
                  <Input
                    type="date"
                    value={editData.endDate}
                    onChange={(e) => setEditData(tierType, { ...editData!, endDate: e.target.value })}
                  />
                </div>
              </div>
              
              <div>
                <Label className="text-sm font-medium mb-3 block">Category Pricing</Label>
                {renderCategoryEditor(editData.categories, (categories) => 
                  setEditData(tierType, { ...editData!, categories })
                )}
              </div>
              
              <div className="flex space-x-2">
                <Button 
                  onClick={() => updateTierInfo(tierType, editData)}
                  disabled={saving}
                >
                  <Save className="h-4 w-4 mr-2" />
                  Save Changes
                </Button>
                <Button 
                  variant="outline" 
                  onClick={() => setEditingTier(null)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    )
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center p-8">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
      </div>
    )
  }

  if (!pricingData) {
    return (
      <Alert>
        <AlertCircle className="h-4 w-4" />
        <AlertDescription>
          Failed to load pricing data. Please try refreshing the page.
        </AlertDescription>
      </Alert>
    )
  }

  return (
    <div className="space-y-6">
      {/* Current Status */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <TrendingUp className="h-5 w-5" />
            <span>Current Pricing Status</span>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            {currentTier && (
              <div className="space-y-2">
                <Label className="text-sm font-medium text-green-600">Currently Active</Label>
                <div className="p-4 bg-green-50 border border-green-200 rounded-lg">
                  <h3 className="font-semibold">{currentTier.name}</h3>
                  <p className="text-sm text-muted-foreground">{currentTier.description}</p>
                  <p className="text-sm mt-2">
                    <span className="font-medium">Valid until:</span> {formatDate(currentTier.endDate)}
                  </p>
                </div>
              </div>
            )}
            
            {nextTier && (
              <div className="space-y-2">
                <Label className="text-sm font-medium text-blue-600">Next Tier</Label>
                <div className="p-4 bg-blue-50 border border-blue-200 rounded-lg">
                  <h3 className="font-semibold">{nextTier.tier.name}</h3>
                  <p className="text-sm text-muted-foreground">{nextTier.tier.description}</p>
                  <p className="text-sm mt-2">
                    <span className="font-medium">Starts in:</span> {nextTier.daysUntil} days
                  </p>
                </div>
              </div>
            )}
          </div>
        </CardContent>
      </Card>

      <Tabs defaultValue="tiers" className="w-full">
        <TabsList className="grid w-full grid-cols-3">
          <TabsTrigger value="tiers">Standard Tiers</TabsTrigger>
          <TabsTrigger value="special">Special Offers</TabsTrigger>
          <TabsTrigger value="accompanying">Accompanying</TabsTrigger>
        </TabsList>

        <TabsContent value="tiers" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {renderTierCard(pricingData.earlyBird, 'earlyBird', currentTier?.id === 'early-bird')}
            {renderTierCard(pricingData.regular, 'regular', currentTier?.id === 'regular')}
          </div>
          <div className="grid grid-cols-1 lg:grid-cols-1 gap-6">
            {renderTierCard(pricingData.onsite, 'onsite', currentTier?.id === 'onsite')}
          </div>
        </TabsContent>

        <TabsContent value="special" className="space-y-6">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="text-lg font-semibold">Special Offers</h3>
              <p className="text-sm text-muted-foreground">Create time-limited special pricing offers</p>
            </div>
            <Dialog open={showNewOfferDialog} onOpenChange={setShowNewOfferDialog}>
              <DialogTrigger asChild>
                <Button>
                  <Plus className="h-4 w-4 mr-2" />
                  Add Special Offer
                </Button>
              </DialogTrigger>
              <DialogContent className="max-w-4xl">
                <DialogHeader>
                  <DialogTitle>Create New Special Offer</DialogTitle>
                  <DialogDescription>
                    Set up a time-limited special pricing offer
                  </DialogDescription>
                </DialogHeader>
                <NewSpecialOfferForm 
                  onSave={addSpecialOffer}
                  onCancel={() => setShowNewOfferDialog(false)}
                />
              </DialogContent>
            </Dialog>
            
            {/* Edit Special Offer Dialog */}
            <Dialog open={showEditOfferDialog} onOpenChange={setShowEditOfferDialog}>
              <DialogContent className="max-w-4xl">
                <DialogHeader>
                  <DialogTitle>Edit Special Offer</DialogTitle>
                  <DialogDescription>
                    Update the special pricing offer details
                  </DialogDescription>
                </DialogHeader>
                {editingSpecialOffer && (
                  <EditSpecialOfferForm 
                    offer={editingSpecialOffer}
                    onSave={(updatedOffer) => {
                      updateSpecialOffer(editingSpecialOffer.id, updatedOffer)
                      setShowEditOfferDialog(false)
                      setEditingSpecialOffer(null)
                    }}
                    onCancel={() => {
                      setShowEditOfferDialog(false)
                      setEditingSpecialOffer(null)
                    }}
                  />
                )}
              </DialogContent>
            </Dialog>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {pricingData.specialOffers.map(offer => (
              <Card key={offer.id} className={currentTier?.id === offer.id ? 'ring-2 ring-green-500' : ''}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div>
                      <CardTitle className="flex items-center space-x-2">
                        <span>{offer.name}</span>
                        {currentTier?.id === offer.id && (
                          <Badge variant="secondary" className="bg-green-100 text-green-800">Active Now</Badge>
                        )}
                      </CardTitle>
                    </div>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => startEditingSpecialOffer(offer)}
                      >
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => deleteSpecialOffer(offer.id)}
                        className="text-red-600 hover:text-red-700"
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  <CardDescription>{offer.description}</CardDescription>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-600">Status:</span>
                      <Switch
                        checked={offer.isActive}
                        onCheckedChange={(checked) => updateSpecialOffer(offer.id, { isActive: checked })}
                      />
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => deleteSpecialOffer(offer.id)}
                      >
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-2 gap-4 text-sm mb-4">
                    <div>
                      <Label className="text-xs text-muted-foreground">Start Date</Label>
                      <p className="font-medium">{formatDate(offer.startDate)}</p>
                    </div>
                    <div>
                      <Label className="text-xs text-muted-foreground">End Date</Label>
                      <p className="font-medium">{formatDate(offer.endDate)}</p>
                    </div>
                  </div>
                  
                  <div className="space-y-2">
                    <Label className="text-sm font-medium">Special Pricing</Label>
                    {categoryKeys.map(key => (
                      <div key={key} className="flex justify-between items-center">
                        <span className="text-sm">{categoryLabels[key as keyof typeof categoryLabels]}</span>
                        <span className="font-medium">
                          {formatCurrency(offer.categories[key]?.amount || 0, offer.categories[key]?.currency || 'INR')}
                        </span>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>
        
        {/* Accompanying Person Pricing Tab */}
        <TabsContent value="accompanying" className="space-y-6">
          <AccompanyingPersonPricing />
        </TabsContent>
      </Tabs>
    </div>
  )
}

// Accompanying Person Pricing Component
function AccompanyingPersonPricing() {
  const [accompanyingConfig, setAccompanyingConfig] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  const [saving, setSaving] = useState(false)
  const { toast } = useToast()

  useEffect(() => {
    loadAccompanyingConfig()
  }, [])

  const loadAccompanyingConfig = async () => {
    try {
      const response = await fetch('/api/admin/config/accompanying-person')
      if (response.ok) {
        const result = await response.json()
        if (result.success) {
          setAccompanyingConfig(result.data || {
            basePrice: 3000,
            currency: 'INR',
            tierPricing: {
              'independence-day-2025': 5000,
              'earlyBird': 3000,
              'regular': 3500,
              'onsite': 4000
            }
          })
        }
      }
    } catch (error) {
      console.error('Error loading accompanying person config:', error)
    } finally {
      setLoading(false)
    }
  }

  const saveAccompanyingConfig = async () => {
    setSaving(true)
    try {
      const response = await fetch('/api/admin/config/accompanying-person', {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(accompanyingConfig)
      })

      if (response.ok) {
        toast({
          title: "Configuration Saved",
          description: "Accompanying person pricing updated successfully."
        })
      } else {
        throw new Error('Failed to save configuration')
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to save accompanying person pricing.",
        variant: "destructive"
      })
    } finally {
      setSaving(false)
    }
  }

  if (loading) {
    return <div className="text-center py-8">Loading accompanying person pricing...</div>
  }

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Users className="h-5 w-5" />
            <span>Accompanying Person Pricing</span>
          </CardTitle>
          <CardDescription>
            Configure pricing for accompanying persons across different pricing tiers
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Base Price */}
          <div className="space-y-2">
            <Label htmlFor="basePrice">Base Price (Default)</Label>
            <div className="flex items-center space-x-2">
              <span className="text-sm text-gray-500">â‚¹</span>
              <Input
                id="basePrice"
                type="number"
                value={accompanyingConfig?.basePrice || 3000}
                onChange={(e) => setAccompanyingConfig(prev => ({
                  ...prev,
                  basePrice: parseInt(e.target.value) || 3000
                }))}
                className="max-w-xs"
              />
              <span className="text-sm text-gray-500">per person</span>
            </div>
          </div>

          <Separator />

          {/* Tier-based Pricing */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold">Tier-based Pricing</h3>
            <p className="text-sm text-gray-600">
              Set different prices for accompanying persons based on the active pricing tier
            </p>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {[
                { key: 'independence-day-2025', label: 'Independence Day Special', color: 'bg-orange-100 text-orange-800' },
                { key: 'earlyBird', label: 'Early Bird', color: 'bg-green-100 text-green-800' },
                { key: 'regular', label: 'Regular', color: 'bg-blue-100 text-blue-800' },
                { key: 'onsite', label: 'Onsite', color: 'bg-red-100 text-red-800' }
              ].map(tier => (
                <Card key={tier.key} className="p-4">
                  <div className="space-y-3">
                    <div className="flex items-center justify-between">
                      <Badge className={tier.color}>{tier.label}</Badge>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className="text-sm text-gray-500">â‚¹</span>
                      <Input
                        type="number"
                        value={accompanyingConfig?.tierPricing?.[tier.key] || accompanyingConfig?.basePrice || 3000}
                        onChange={(e) => setAccompanyingConfig(prev => ({
                          ...prev,
                          tierPricing: {
                            ...prev?.tierPricing,
                            [tier.key]: parseInt(e.target.value) || prev?.basePrice || 3000
                          }
                        }))}
                        className="max-w-xs"
                      />
                      <span className="text-sm text-gray-500">per person</span>
                    </div>
                  </div>
                </Card>
              ))}
            </div>
          </div>

          <Separator />

          {/* Save Button */}
          <div className="flex justify-end">
            <Button onClick={saveAccompanyingConfig} disabled={saving}>
              {saving ? 'Saving...' : 'Save Configuration'}
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}

// Edit Special Offer Form Component
function EditSpecialOfferForm({ 
  offer,
  onSave, 
  onCancel 
}: { 
  offer: SpecialOffer
  onSave: (offer: Partial<SpecialOffer>) => void
  onCancel: () => void 
}) {
  const [formData, setFormData] = useState<SpecialOffer>(offer)

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault()
    onSave(formData)
  }

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="edit-name">Offer Name</Label>
          <Input
            id="edit-name"
            value={formData.name}
            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="edit-id">Offer ID</Label>
          <Input
            id="edit-id"
            value={formData.id}
            onChange={(e) => setFormData(prev => ({ ...prev, id: e.target.value }))}
            required
          />
        </div>
      </div>
      
      <div className="space-y-2">
        <Label htmlFor="edit-description">Description</Label>
        <Textarea
          id="edit-description"
          value={formData.description}
          onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
          required
        />
      </div>
      
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div className="space-y-2">
          <Label htmlFor="edit-start-date">Start Date</Label>
          <Input
            id="edit-start-date"
            type="date"
            value={formData.startDate}
            onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
            required
          />
        </div>
        <div className="space-y-2">
          <Label htmlFor="edit-end-date">End Date</Label>
          <Input
            id="edit-end-date"
            type="date"
            value={formData.endDate}
            onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
            required
          />
        </div>
      </div>
      
      <div className="space-y-4">
        <h4 className="text-lg font-semibold">Category Pricing</h4>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {[
            { key: 'ntsi-member', label: 'NTSI Member' },
            { key: 'non-member', label: 'Non Member' },
            { key: 'pg-student', label: 'PG Student' }
          ].map(category => (
            <div key={category.key} className="space-y-2">
              <Label htmlFor={`edit-${category.key}`}>{category.label} (â‚¹)</Label>
              <Input
                id={`edit-${category.key}`}
                type="number"
                value={formData.categories[category.key]?.amount || 0}
                onChange={(e) => setFormData(prev => ({
                  ...prev,
                  categories: {
                    ...prev.categories,
                    [category.key]: {
                      amount: parseInt(e.target.value) || 0,
                      currency: 'INR',
                      label: category.label
                    }
                  }
                }))}
                required
              />
            </div>
          ))}
        </div>
      </div>
      
      <div className="flex items-center space-x-2">
        <Switch
          id="edit-active"
          checked={formData.isActive}
          onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
        />
        <Label htmlFor="edit-active">Active</Label>
      </div>
      
      <DialogFooter>
        <Button type="button" variant="outline" onClick={onCancel}>
          Cancel
        </Button>
        <Button type="submit">
          Update Offer
        </Button>
      </DialogFooter>
    </form>
  )
}

function NewSpecialOfferForm({ 
  onSave, 
  onCancel 
}: { 
  onSave: (offer: SpecialOffer) => void
  onCancel: () => void 
}) {
  const [formData, setFormData] = useState<SpecialOffer>({
    id: '',
    name: '',
    description: '',
    startDate: '',
    endDate: '',
    isActive: true,
    categories: {
      'ntsi-member': { amount: 5000, currency: 'INR', label: 'NTSI Member' },
      'non-member': { amount: 5000, currency: 'INR', label: 'Non Member' },
      'pg-student': { amount: 5000, currency: 'INR', label: 'PG Student' },
      'accompanying': { amount: 5000, currency: 'INR', label: 'Accompanying Person' }
    }
  })

  const handleSave = () => {
    if (!formData.name || !formData.startDate || !formData.endDate) {
      return
    }

    const offer = {
      ...formData,
      id: formData.name.toLowerCase().replace(/\s+/g, '-') + '-' + Date.now()
    }

    onSave(offer)
  }

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
          <Label>Offer Name *</Label>
          <Input
            value={formData.name}
            onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
            placeholder="e.g., Independence Day Special"
          />
        </div>
        <div>
          <Label>Description</Label>
          <Input
            value={formData.description}
            onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
            placeholder="Brief description of the offer"
          />
        </div>
        <div>
          <Label>Start Date *</Label>
          <Input
            type="date"
            value={formData.startDate}
            onChange={(e) => setFormData(prev => ({ ...prev, startDate: e.target.value }))}
          />
        </div>
        <div>
          <Label>End Date *</Label>
          <Input
            type="date"
            value={formData.endDate}
            onChange={(e) => setFormData(prev => ({ ...prev, endDate: e.target.value }))}
          />
        </div>
      </div>

      <div>
        <Label className="text-sm font-medium mb-3 block">Special Offer Pricing</Label>
        <div className="space-y-4">
          {categoryKeys.map(key => (
            <div key={key} className="grid grid-cols-1 md:grid-cols-3 gap-3 p-4 border rounded-lg">
              <div className="md:col-span-1">
                <Label className="text-sm font-medium">{categoryLabels[key as keyof typeof categoryLabels]}</Label>
              </div>
              <div>
                <Label className="text-xs text-muted-foreground">Amount</Label>
                <Input
                  type="number"
                  value={formData.categories[key]?.amount || 0}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    categories: {
                      ...prev.categories,
                      [key]: {
                        ...prev.categories[key],
                        amount: parseInt(e.target.value) || 0
                      }
                    }
                  }))}
                  className="text-sm"
                />
              </div>
              <div>
                <Label className="text-xs text-muted-foreground">Currency</Label>
                <select
                  value={formData.categories[key]?.currency || 'INR'}
                  onChange={(e) => setFormData(prev => ({
                    ...prev,
                    categories: {
                      ...prev.categories,
                      [key]: {
                        ...prev.categories[key],
                        currency: e.target.value
                      }
                    }
                  }))}
                  className="w-full px-3 py-2 text-sm border border-input bg-background rounded-md"
                >
                  <option value="INR">INR</option>
                  <option value="USD">USD</option>
                </select>
              </div>
            </div>
          ))}
        </div>
      </div>

      <DialogFooter>
        <Button variant="outline" onClick={onCancel}>Cancel</Button>
        <Button onClick={handleSave}>Create Special Offer</Button>
      </DialogFooter>
    </div>
  )
}